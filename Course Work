import sys
import sqlite3
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton,
    QLineEdit, QTableWidget, QTableWidgetItem, QMessageBox, QHeaderView
)
from PyQt5.QtCore import Qt


DB_PATH = "car_park2.db"
def initialize_database():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        full_name TEXT NOT NULL
    );''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS profiles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        position TEXT NOT NULL,
        experience INTEGER NOT NULL,
        FOREIGN KEY(user_id) REFERENCES users(id)
    );''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS car_park (
        vin TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        status TEXT NOT NULL,
        year INTEGER NOT NULL,
        type TEXT NOT NULL,
        driver TEXT
    );''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS fuel (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        vin TEXT NOT NULL,
        date TEXT NOT NULL,
        price REAL NOT NULL,
        volume REAL NOT NULL,
        FOREIGN KEY(vin) REFERENCES car_park(vin)
    );''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS service (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        vin TEXT NOT NULL,
        date TEXT NOT NULL,
        service_type TEXT NOT NULL,
        FOREIGN KEY(vin) REFERENCES car_park(vin)
    );''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS team (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        full_name TEXT NOT NULL,
        position TEXT NOT NULL,
        experience INTEGER NOT NULL
    );''')

    conn.commit()
    conn.close()

class AuthWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Авторизация")
        self.setGeometry(100, 100, 300, 200)

        self.layout = QVBoxLayout()

        self.login_input = QLineEdit(self)
        self.login_input.setPlaceholderText("Введите логин")

        self.password_input = QLineEdit(self)
        self.password_input.setPlaceholderText("Введите пароль")
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)

        self.register_button = QPushButton("Зарегистрироваться", self)
        self.register_button.clicked.connect(self.open_registration_window)

        self.login_button = QPushButton("Войти", self)
        self.login_button.clicked.connect(self.login)

        self.layout.addWidget(QLabel("Логин:"))
        self.layout.addWidget(self.login_input)
        self.layout.addWidget(QLabel("Пароль:"))
        self.layout.addWidget(self.password_input)
        self.layout.addWidget(self.register_button)
        self.layout.addWidget(self.login_button)

        self.setLayout(self.layout)

    def open_registration_window(self):
        self.registration_window = RegistrationWindow()
        self.registration_window.show()

    def login(self):
        username = self.login_input.text()
        password = self.password_input.text()

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT id FROM users WHERE username = ? AND password = ?", (username, password))
        user = cursor.fetchone()

        conn.close()

        if user:
            self.main_window = MainWindow(user[0])
            self.main_window.show()
            self.close()
        else:
            QMessageBox.warning(self, "Ошибка", "Неверный логин или пароль.")

class RegistrationWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Регистрация")
        self.setGeometry(100, 100, 300, 300)

        self.layout = QVBoxLayout()

        self.full_name_input = QLineEdit(self)
        self.full_name_input.setPlaceholderText("Введите ФИО")

        self.login_input = QLineEdit(self)
        self.login_input.setPlaceholderText("Введите логин")

        self.password_input = QLineEdit(self)
        self.password_input.setPlaceholderText("Введите пароль")
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)

        self.register_button = QPushButton("Зарегистрироваться", self)
        self.register_button.clicked.connect(self.register_user)

        self.layout.addWidget(QLabel("ФИО:"))
        self.layout.addWidget(self.full_name_input)
        self.layout.addWidget(QLabel("Логин:"))
        self.layout.addWidget(self.login_input)
        self.layout.addWidget(QLabel("Пароль:"))
        self.layout.addWidget(self.password_input)
        self.layout.addWidget(self.register_button)

        self.setLayout(self.layout)

    def register_user(self):
        full_name = self.full_name_input.text()
        username = self.login_input.text()
        password = self.password_input.text()

        if not full_name or not username or not password:
            QMessageBox.warning(self, "Ошибка", "Заполните все поля.")
            return

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        try:
            cursor.execute("INSERT INTO users (username, password, full_name) VALUES (?, ?, ?)", (username, password, full_name))
            conn.commit()
            QMessageBox.information(self, "Успех", "Пользователь успешно зарегистрирован.")
            self.close()
        except sqlite3.IntegrityError:
            QMessageBox.warning(self, "Ошибка", "Имя пользователя уже занято.")
        finally:
            conn.close()

class MainWindow(QMainWindow):
    def __init__(self, user_id):
        super().__init__()
        self.user_id = user_id
        self.setWindowTitle("Система управления парком автомобилей")
        self.setGeometry(100, 100, 1200, 600)

        # Основной макет
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        self.main_layout = QHBoxLayout()
        self.central_widget.setLayout(self.main_layout)

        # Левое меню
        self.menu_widget = QWidget()
        self.menu_layout = QVBoxLayout()
        self.menu_widget.setLayout(self.menu_layout)
        self.menu_widget.setStyleSheet("background-color: #1E90FF;")
        self.menu_widget.setFixedWidth(200)

        self.profile_button = QPushButton("Профиль")
        self.profile_button.clicked.connect(self.show_profile)

        self.car_park_button = QPushButton("Автопарк")
        self.car_park_button.clicked.connect(self.show_car_park)

        self.fuel_button = QPushButton("Топливо")
        self.fuel_button.clicked.connect(self.show_fuel)

        self.service_button = QPushButton("Сервис")
        self.service_button.clicked.connect(self.show_service)

        self.team_button = QPushButton("Команда")
        self.team_button.clicked.connect(self.show_team)

        self.menu_layout.addWidget(self.profile_button)
        self.menu_layout.addWidget(self.car_park_button)
        self.menu_layout.addWidget(self.fuel_button)
        self.menu_layout.addWidget(self.service_button)
        self.menu_layout.addWidget(self.team_button)
        self.menu_layout.addStretch()

        self.main_layout.addWidget(self.menu_widget)

        # Основной контент
        self.content_widget = QWidget()
        self.content_layout = QVBoxLayout()
        self.content_widget.setLayout(self.content_layout)
        self.main_layout.addWidget(self.content_widget)

        self.show_profile()

    def clear_content(self):
        while self.content_layout.count():
            item = self.content_layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()

    def show_profile(self):
        self.clear_content()

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        cursor.execute("SELECT full_name FROM users WHERE id = ?", (self.user_id,))
        full_name = cursor.fetchone()[0]

        cursor.execute("SELECT position, experience FROM profiles WHERE user_id = ?", (self.user_id,))
        profile = cursor.fetchone()

        conn.close()

        profile_widget = QWidget()
        profile_layout = QVBoxLayout()
        profile_widget.setLayout(profile_layout)
        profile_widget.setStyleSheet("background-color: #E6F7FF; border: 2px solid #4682B4; border-radius: 15px; padding: 20px;")

        title_label = QLabel("<h2>Профиль</h2>")
        title_label.setAlignment(Qt.AlignCenter)

        full_name_label = QLabel(f"<b>ФИО:</b> {full_name}")
        position_label = QLabel(f"<b>Должность:</b> {profile[0] if profile else 'Не указано'}")
        experience_label = QLabel(f"<b>Стаж:</b> {profile[1] if profile else 'Не указано'} года")

        for label in [title_label, full_name_label, position_label, experience_label]:
            label.setStyleSheet("font-size: 16px; margin: 10px;")

        profile_layout.addWidget(title_label)
        profile_layout.addWidget(full_name_label)
        profile_layout.addWidget(position_label)
        profile_layout.addWidget(experience_label)

        self.content_layout.addWidget(profile_widget)

    def show_car_park(self):
        self.show_table("Автопарк", ["VIN", "Название", "Статус", "Год выпуска", "Тип", "Водитель"],
                        "SELECT vin, name, status, year, type, driver FROM car_park")

    def show_fuel(self):
        self.show_table("Топливо", ["ID", "VIN", "Дата", "Цена", "Объем"],
                        "SELECT id, vin, date, price, volume FROM fuel")

    def show_service(self):
        self.show_table("Сервис", ["ID обслуживания", "VIN", "Дата", "Тип обслуживания"],
                        "SELECT id, vin, date, service_type FROM service")

    def show_team(self):
        self.show_table("Команда", ["ID", "ФИО", "Должность", "Стаж"],
                        "SELECT id, full_name, position, experience FROM team")

    def show_table(self, title, headers, query):
        self.clear_content()

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(query)
        data = cursor.fetchall()
        conn.close()

        self.table = QTableWidget()
        self.table.setColumnCount(len(headers))
        self.table.setHorizontalHeaderLabels(headers)
        self.table.setRowCount(len(data))
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.setEditTriggers(QTableWidget.DoubleClicked)

        for row_idx, row_data in enumerate(data):
            for col_idx, value in enumerate(row_data):
                self.table.setItem(row_idx, col_idx, QTableWidgetItem(str(value)))

        self.content_layout.addWidget(self.table)

if __name__ == "__main__":
    initialize_database()
    app = QApplication(sys.argv)
    window = AuthWindow()
    window.show()
    sys.exit(app.exec_())
